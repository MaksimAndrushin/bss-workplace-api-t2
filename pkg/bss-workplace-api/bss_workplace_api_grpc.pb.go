// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bss_workplace_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BssWorkplaceApiServiceClient is the client API for BssWorkplaceApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BssWorkplaceApiServiceClient interface {
	// CreateWorkplaceV1 - Create a workplace
	CreateWorkplaceV1(ctx context.Context, in *CreateWorkplaceV1Request, opts ...grpc.CallOption) (*CreateWorkplaceV1Response, error)
	// DescribeWorkplaceV1 - Describe a workplace
	DescribeWorkplaceV1(ctx context.Context, in *DescribeWorkplaceV1Request, opts ...grpc.CallOption) (*DescribeWorkplaceV1Response, error)
	// ListWorkplaceV1 - List a workplace
	ListWorkplacesV1(ctx context.Context, in *ListWorkplacesV1Request, opts ...grpc.CallOption) (*ListWorkplacesV1Response, error)
	// RemoveWorkplaceV1 - Remove a workplace
	RemoveWorkplaceV1(ctx context.Context, in *RemoveWorkplaceV1Request, opts ...grpc.CallOption) (*RemoveWorkplaceV1Response, error)
}

type bssWorkplaceApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBssWorkplaceApiServiceClient(cc grpc.ClientConnInterface) BssWorkplaceApiServiceClient {
	return &bssWorkplaceApiServiceClient{cc}
}

func (c *bssWorkplaceApiServiceClient) CreateWorkplaceV1(ctx context.Context, in *CreateWorkplaceV1Request, opts ...grpc.CallOption) (*CreateWorkplaceV1Response, error) {
	out := new(CreateWorkplaceV1Response)
	err := c.cc.Invoke(ctx, "/ozonmp.bss_workplace_api.v1.BssWorkplaceApiService/CreateWorkplaceV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bssWorkplaceApiServiceClient) DescribeWorkplaceV1(ctx context.Context, in *DescribeWorkplaceV1Request, opts ...grpc.CallOption) (*DescribeWorkplaceV1Response, error) {
	out := new(DescribeWorkplaceV1Response)
	err := c.cc.Invoke(ctx, "/ozonmp.bss_workplace_api.v1.BssWorkplaceApiService/DescribeWorkplaceV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bssWorkplaceApiServiceClient) ListWorkplacesV1(ctx context.Context, in *ListWorkplacesV1Request, opts ...grpc.CallOption) (*ListWorkplacesV1Response, error) {
	out := new(ListWorkplacesV1Response)
	err := c.cc.Invoke(ctx, "/ozonmp.bss_workplace_api.v1.BssWorkplaceApiService/ListWorkplacesV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bssWorkplaceApiServiceClient) RemoveWorkplaceV1(ctx context.Context, in *RemoveWorkplaceV1Request, opts ...grpc.CallOption) (*RemoveWorkplaceV1Response, error) {
	out := new(RemoveWorkplaceV1Response)
	err := c.cc.Invoke(ctx, "/ozonmp.bss_workplace_api.v1.BssWorkplaceApiService/RemoveWorkplaceV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BssWorkplaceApiServiceServer is the server API for BssWorkplaceApiService service.
// All implementations must embed UnimplementedBssWorkplaceApiServiceServer
// for forward compatibility
type BssWorkplaceApiServiceServer interface {
	// CreateWorkplaceV1 - Create a workplace
	CreateWorkplaceV1(context.Context, *CreateWorkplaceV1Request) (*CreateWorkplaceV1Response, error)
	// DescribeWorkplaceV1 - Describe a workplace
	DescribeWorkplaceV1(context.Context, *DescribeWorkplaceV1Request) (*DescribeWorkplaceV1Response, error)
	// ListWorkplaceV1 - List a workplace
	ListWorkplacesV1(context.Context, *ListWorkplacesV1Request) (*ListWorkplacesV1Response, error)
	// RemoveWorkplaceV1 - Remove a workplace
	RemoveWorkplaceV1(context.Context, *RemoveWorkplaceV1Request) (*RemoveWorkplaceV1Response, error)
	mustEmbedUnimplementedBssWorkplaceApiServiceServer()
}

// UnimplementedBssWorkplaceApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBssWorkplaceApiServiceServer struct {
}

func (UnimplementedBssWorkplaceApiServiceServer) CreateWorkplaceV1(context.Context, *CreateWorkplaceV1Request) (*CreateWorkplaceV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkplaceV1 not implemented")
}
func (UnimplementedBssWorkplaceApiServiceServer) DescribeWorkplaceV1(context.Context, *DescribeWorkplaceV1Request) (*DescribeWorkplaceV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeWorkplaceV1 not implemented")
}
func (UnimplementedBssWorkplaceApiServiceServer) ListWorkplacesV1(context.Context, *ListWorkplacesV1Request) (*ListWorkplacesV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkplacesV1 not implemented")
}
func (UnimplementedBssWorkplaceApiServiceServer) RemoveWorkplaceV1(context.Context, *RemoveWorkplaceV1Request) (*RemoveWorkplaceV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWorkplaceV1 not implemented")
}
func (UnimplementedBssWorkplaceApiServiceServer) mustEmbedUnimplementedBssWorkplaceApiServiceServer() {
}

// UnsafeBssWorkplaceApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BssWorkplaceApiServiceServer will
// result in compilation errors.
type UnsafeBssWorkplaceApiServiceServer interface {
	mustEmbedUnimplementedBssWorkplaceApiServiceServer()
}

func RegisterBssWorkplaceApiServiceServer(s grpc.ServiceRegistrar, srv BssWorkplaceApiServiceServer) {
	s.RegisterService(&BssWorkplaceApiService_ServiceDesc, srv)
}

func _BssWorkplaceApiService_CreateWorkplaceV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkplaceV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BssWorkplaceApiServiceServer).CreateWorkplaceV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozonmp.bss_workplace_api.v1.BssWorkplaceApiService/CreateWorkplaceV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BssWorkplaceApiServiceServer).CreateWorkplaceV1(ctx, req.(*CreateWorkplaceV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BssWorkplaceApiService_DescribeWorkplaceV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeWorkplaceV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BssWorkplaceApiServiceServer).DescribeWorkplaceV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozonmp.bss_workplace_api.v1.BssWorkplaceApiService/DescribeWorkplaceV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BssWorkplaceApiServiceServer).DescribeWorkplaceV1(ctx, req.(*DescribeWorkplaceV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BssWorkplaceApiService_ListWorkplacesV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkplacesV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BssWorkplaceApiServiceServer).ListWorkplacesV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozonmp.bss_workplace_api.v1.BssWorkplaceApiService/ListWorkplacesV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BssWorkplaceApiServiceServer).ListWorkplacesV1(ctx, req.(*ListWorkplacesV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BssWorkplaceApiService_RemoveWorkplaceV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWorkplaceV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BssWorkplaceApiServiceServer).RemoveWorkplaceV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozonmp.bss_workplace_api.v1.BssWorkplaceApiService/RemoveWorkplaceV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BssWorkplaceApiServiceServer).RemoveWorkplaceV1(ctx, req.(*RemoveWorkplaceV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// BssWorkplaceApiService_ServiceDesc is the grpc.ServiceDesc for BssWorkplaceApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BssWorkplaceApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ozonmp.bss_workplace_api.v1.BssWorkplaceApiService",
	HandlerType: (*BssWorkplaceApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWorkplaceV1",
			Handler:    _BssWorkplaceApiService_CreateWorkplaceV1_Handler,
		},
		{
			MethodName: "DescribeWorkplaceV1",
			Handler:    _BssWorkplaceApiService_DescribeWorkplaceV1_Handler,
		},
		{
			MethodName: "ListWorkplacesV1",
			Handler:    _BssWorkplaceApiService_ListWorkplacesV1_Handler,
		},
		{
			MethodName: "RemoveWorkplaceV1",
			Handler:    _BssWorkplaceApiService_RemoveWorkplaceV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ozonmp/bss_workplace_api/v1/bss_workplace_api.proto",
}
